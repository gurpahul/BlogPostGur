@model IEnumerable<GurpahulBlogggg18.Models.BlogPosts>

@using PagedList;
@using PagedList.Mvc;

@{
    ViewBag.Title = "Index";
    var pagedList = (IPagedList)Model;
}

<!-- Page Header -->
<!-- Set your background image for this header on the line below. -->
<header class="intro-header" style="background-image: url('@Url.Content("~/img/home-bg.jpg")')">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="site-heading">
                    <h1>Blog Post</h1>
                    <hr class="small">
                    <span class="subheading">A Blog Post By Gurpahul Singh</span>
                </div>
            </div>
        </div>
    </div>
</header>

<div class="container">
    <div class="row">
        <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
            <p>
                @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
            {

                @Html.ActionLink("Create New", "Create")


            }

               

                @using (Html.BeginForm("Index", "BlogPosts", FormMethod.Get))
                {
                    <input type="text" class="form-control" name="searchString" placeholder="Search for posts" value="@ViewBag.SearchString" />
                    <input type="submit" class="btn btn-primary" value="Search!" />
                }
            </p>

            <table class="table">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Created)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Updated)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Title)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Slug)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Body)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.MediaUrl)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Published)
                    </th>
                    <th></th>
                </tr>

                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Created)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Updated)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Title)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Slug)
                        </td>
                        <td>
                            @Html.Raw(item.Body)
                        </td>
                        <td>


                            @if (item.MediaUrl != null)
                            {

                                <img class="img-responsive" src="@item.MediaUrl" alt="">
                            }

                        </td>


                        <td>
                            @Html.DisplayFor(modelItem => item.Published)
                        </td>
                        <td>
                            @if (User.Identity.IsAuthenticated && (User.IsInRole("Admin") || (User.IsInRole("Moderrator"))))
                            {
                                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) 
                                @Html.ActionLink("Delete", "Delete", new { id = item.Id })

                            }


                            @Html.ActionLink("Details", "Details", new { slug = item.Slug }) 

                        </td>
                    </tr>
                }




            </table>
            Page @(pagedList.PageCount < pagedList.PageNumber ? 0 : pagedList.PageNumber) of @pagedList.PageCount
            @Html.PagedListPager(pagedList, page => Url.Action("Index", new { page, ViewBag.SearchString }))
        </div>
    </div>
</div>






